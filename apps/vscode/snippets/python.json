{
	"Swap": {
		"prefix": "swap",
		"body": [
			"$1, $2 = $2, $1"
		],
		"description": ""
	},
	"Flatten": {
		"prefix": "flatten",
		"body": [
			"chain.from_iterable($1)"
		]
	},
	"asdf": {
		"prefix": "split_list_n_sized_each",
		"body": [
			"i${1:list} = iter(${1:list})",
			"for chunk in iter(lambda: tuple(islice(i${1:list}, ${2:size})), ()):",
			"    yield from chunk"
		],
		"description": "Todo: 주의사항 적어두기"
	},
	"Comprehension Dictionary": {
		"prefix": "comprehension_dict",
		"body": [
			"{key: value for key, value in $1.items()}"
		]
	},
	"Comprehension Set": {
		"prefix": "comprehension_set",
		"body": [
			"{$1 for $1 in $2}"
		]
	},
	"Simple Raise Test": {
		"prefix": "pytest_raise_basic",
		"body": [
			"with pytest.raises(ZeroDivisionError):",
			"    1 / 0"
		],
		"description": ""
	},
	"Raise Test with check Exception Info": {
		"prefix": "pytest_raise_exception_info",
		"body": [
			"with pytest.raises(ZeroDivisionError):",
			"    def f():",
			"        f()",
			"    f()",
			"assert 'maximum recursion' in str(excinfo.value)"
		],
		"description": ""
	},
	"Raise Test with Keyword": {
		"prefix": "pytest_raise_keyword",
		"body": [
			"with pytest.raises(ValueError, match=r'.* 123 .*'):",
			"    raise ValueError('Exception 123 raised')"
		],
		"description": ""
	},
	"Pretty Json": {
		"prefix": "pretty_json_dumps",
		"body": [
			"json.dumps($1, ensure_ascii=False, tab_indent=2)"
		],
		"description": ""
	},
	"Search Class in Module": {
		"prefix": "search_class_in_module",
		"body": [
			"def $1(module_name='$2'):",
			"    module = import_module(f'{module_name}')",
			"    if hasattr(module, '__path__'):",
			"        for submodule in iter_modules(module.__path__):",
			"            yield from $1(f'{module_name}.{submodule.name}')",
			"",
			"    for member in getmembers(module, isclass):",
			"        if issubclass(member[1], $3) and member[1] != $3:",
			"            yield (f'{module_name}.{member[0]}', member[1])"
		],
		"description": ""
	},
	"Search in Module": {
		"prefix": "search_in_module",
		"body": [
			"def $1(module_name='$2'):",
			"    module = import_module(f'{module_name}')",
			"    if hasattr(module, '__path__'):",
			"        for submodule in iter_modules(module.__path__):",
			"            yield from $1(f'{module_name}.{submodule.name}')",
			"",
			"    for member in getmembers(module, isclass):",
			"        yield (f'{module_name}.{member[0]}', member[1])"
		],
		"description": ""
	},
	"Universal Serializer": {
		"prefix": "universal_serializer",
		"body": [
			"import inspect",
			"import json",
			"from datetime import datetime, timezone",
			"from enum import Enum",
			"from importlib import import_module",
			"",
			"from dateutil import parser",
			"",
			"",
			"class UniversalSerializer:",
			"    def serialize(self, **kwargs):",
			"        return json.dumps({k: self._serialize_value(v)",
			"                           for k, v in kwargs.items()},",
			"                          ensure_ascii=False)",
			"",
			"    def deserialize(self, json_value):",
			"        return {k: self._deserialize_value(v)",
			"                for k, v in json.loads(json_value).items()}",
			"",
			"    def _serialize_value(self, value):",
			"        type_name = type(value).__name__",
			"        if isinstance(value, dict):",
			"            serialized_value = {k: self._serialize_value(v) for k, v in value.items()}",
			"        elif isinstance(value, list):",
			"            serialized_value = [self._serialize_value(v) for v in value]",
			"        elif isinstance(value, datetime):",
			"            value.astimezone(timezone.utc)",
			"            serialized_value = value.strftime(\"%Y-%m-%dT%H:%M:%SZ\")",
			"        elif type_name in ('int', 'str', 'NoneType'):",
			"            serialized_value = value",
			"        else:",
			"            module_path = inspect.getmodule(value).__name__",
			"            type_name = f'{module_path}.{type_name}'",
			"            serialized_value = value.value if isinstance(value, Enum) else value",
			"",
			"        return {'type': type_name, 'value': serialized_value}",
			"",
			"    def _deserialize_value(self, details):",
			"        type_name = details['type']",
			"        value = details['value']",
			"",
			"        if type_name == 'dict':",
			"            return {k: self._deserialize_value(v) for k, v in value.items()}",
			"        if type_name == 'list':",
			"            return [self._deserialize_value(v) for v in value]",
			"        if type_name == 'datetime':",
			"            return parser.parse(value).astimezone(timezone.utc)",
			"        if type_name in ('int', 'str'):",
			"            return value",
			"        if type_name == 'NoneType':",
			"            return None",
			"",
			"        module, cls_name = type_name.rsplit('.', 1)",
			"        cls = getattr(import_module(module), cls_name)",
			"        if issubclass(cls, Enum):",
			"            return cls(value)",
			"",
			"        return cls(value)"
		],
		"description": "Serializer for almost everything"
	}
}